package com.example.vehicleloc.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.example.vehicleloc.entity.VehicleLocation;
import com.example.vehicleloc.repository.VehicleLocationRepository;

import java.util.List;
import java.util.Random;

@Service
public class VehicleLocationService {

    @Autowired
    private VehicleLocationRepository vehicleLocationRepository;

    @Autowired
    private KafkaTemplate<String, VehicleLocation> kafkaTemplate;

    private volatile boolean generating = false;

    public VehicleLocation saveVehicle(VehicleLocation vehicle) {
        return vehicleLocationRepository.save(vehicle);
    }

    public List<VehicleLocation> getAllVehicles() {
        return vehicleLocationRepository.findAll();
    }

    public void generateLocations() {
        generating = true;
        new Thread(() -> {
            Random random = new Random();
            while (generating) {
                List<VehicleLocation> vehicles = vehicleLocationRepository.findAll();
                for (VehicleLocation vehicle : vehicles) {
                    vehicle.setLat(20 + random.nextDouble());
                    vehicle.setLongitude(70 + random.nextDouble());
                    vehicleLocationRepository.save(vehicle);
                    kafkaTemplate.send("vehicle_location", vehicle);
                }
                try {
                    Thread.sleep(5000); // Sleep for 5 seconds
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        }).start();
    }

    public void stopGenerating() {
        generating = false;
    }
}