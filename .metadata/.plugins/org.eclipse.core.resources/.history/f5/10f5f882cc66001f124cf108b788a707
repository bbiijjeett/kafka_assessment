package com.example.cabbook.config;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;
import org.springframework.kafka.support.serializer.JsonDeserializer;

import com.example.cabbook.entity.VehicleLocation;

import java.util.HashMap;
import java.util.Map;

@EnableKafka
@Configuration
public class KafkaConsumerConfig {

	@Bean
	public ConsumerFactory<String, VehicleLocation> consumerFactory() {
	    Map<String, Object> config = new HashMap<>();
	    config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	    config.put(ConsumerConfig.GROUP_ID_CONFIG, "vehicle_group");
	    config.put(JsonDeserializer.TRUSTED_PACKAGES, "com.example.vehicleloc.entity");

	    return new DefaultKafkaConsumerFactory<>(
	        config,
	        new StringDeserializer(),
	        new ErrorHandlingDeserializer<>(new JsonDeserializer<>(VehicleLocation.class))
	    );
	}

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, VehicleLocation> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, VehicleLocation> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }
}
